package model

import "gorm.io/gorm"

type Class struct {
	gorm.Model
	// ID overrides the default ID field from gorm.Model to be uint instead of uint64. Represents the id of the class
	ID uint64 `json:"id" gorm:"primaryKey"`
	// Name is the name of the class
	Name string `json:"name" gorm:"not null"`
	// Year is the year of the class
	Year string `json:"year" gorm:"not null"`
	// Students is the list of students in the class
	Students []Student `json:"students" gorm:"foreignKey:ClassID"`
	// Sessions is the list of sessions in the class
	Sessions []Session `json:"sessions" gorm:"foreignKey:ClassID"`
}

// TableName overrides the default table name generated by GORM to be `classes`
func (Class) TableName() string {
	return "classes"
}

type ClassModel struct {
	Tx *gorm.DB
}

func NewClassModel(tx *gorm.DB) *ClassModel {
	return &ClassModel{Tx: tx}
}

// Create creates a new class
func (m *ClassModel) Create(class *Class) error {
	return m.Tx.Create(class).Error
}

// GetByID gets a class by ID
func (m *ClassModel) GetByID(id uint64) (*Class, error) {
	var class Class
	err := m.Tx.Where("id = ?", id).Preload("Students").First(&class).Error
	return &class, err
}

// FindAll gets all classes
func (m *ClassModel) FindAll() ([]Class, error) {
	var classes []Class
	err := m.Tx.Find(&classes).Error
	return classes, err
}

// Update updates a class
func (m *ClassModel) Update(class *Class) error {
	return m.Tx.Model(class).Updates(class).Error
}

// Delete deletes a class
func (m *ClassModel) Delete(id uint64) error {
	return m.Tx.Delete(&Class{ID: id}).Error
}

// AddStudent adds a student to a class
func (m *ClassModel) AddStudent(class *Class, student *Student) error {
	return m.Tx.Model(class).Association("Students").Append(student)
}
